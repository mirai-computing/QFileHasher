# Samples of usage:
# compile with debug info: make OPTFLAGS=-g LDFLAGS= TARGET=rhash.debug
# compile for pentiumpro: make OPTFLAGS="-O2 -march=i586 -mcpu=pentiumpro"
# create rpm with statically linked program: make rpm LDFLAGS="-static -s -Wl,--gc-sections"
CC      = gcc
#VERSION = 1.0.4
#PREFIX  = /usr/local
#NOTE: NDEBUG is used to turn off asserts
OPTFLAGS = -O2 -DNDEBUG
DEFFLAGS = 
#DEFFLAGS = -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
#DEFFLAGS = -DVERSION=\"$(VERSION)\" -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
CFLAGS  := -pipe $(DEFFLAGS) $(OPTFLAGS) \
  -Wall -W -Wstrict-prototypes -Wnested-externs -Winline -Wpointer-arith \
  -Wbad-function-cast -Wmissing-prototypes -Wmissing-declarations
LDFLAGS = -L. -lrash
#LDFLAGS = -s
HEADERS = aich.h byte_order.h crc32.h crc_sums.h ed2k.h hex.h md4.h md5.h sha1.h tiger.h              tth.h
SOURCES = aich.c byte_order.c crc32.c crc_sums.c ed2k.c hex.c md4.c md5.c sha1.c tiger.c tiger_data.c tth.c
OBJECTS = aich.o byte_order.o crc32.o crc_sums.o ed2k.o hex.o md4.o md5.o sha1.o tiger.o tiger_data.o tth.o
LIBRARY = librash.a
TEST_TARGET = test_sums


all: $(LIBRARY)

#%.o: %.c
#	$(CC) -c $(CFLAGS) $< -o $@

# NOTE: dependences were generated by 'gcc -MM *.c'
# we are using plain old makefile style to support BSD make
aich.o: aich.c aich.h sha1.h
	$(CC) -c $(CFLAGS) $< -o $@

byte_order.o: byte_order.c byte_order.h
	$(CC) -c $(CFLAGS) $< -o $@

crc32.o: crc32.c byte_order.h crc32.h
	$(CC) -c $(CFLAGS) $< -o $@

crc_sums.o: crc_sums.c crc32.h md5.h ed2k.h md4.h sha1.h tiger.h tth.h \
  aich.h hex.h byte_order.h crc_sums.h
	$(CC) -c $(CFLAGS) $< -o $@

ed2k.o: ed2k.c ed2k.h md4.h
	$(CC) -c $(CFLAGS) $< -o $@

hex.o: hex.c hex.h
	$(CC) -c $(CFLAGS) $< -o $@

md4.o: md4.c byte_order.h md4.h
	$(CC) -c $(CFLAGS) $< -o $@

md5.o: md5.c byte_order.h md5.h
	$(CC) -c $(CFLAGS) $< -o $@

sha1.o: sha1.c byte_order.h sha1.h
	$(CC) -c $(CFLAGS) $< -o $@

test_sums.o: test_sums.c crc_sums.h
	$(CC) -c $(CFLAGS) $< -o $@

tiger.o: tiger.c byte_order.h tiger.h
	$(CC) -c $(CFLAGS) $< -o $@

tiger_data.o: tiger_data.c
	$(CC) -c $(CFLAGS) $< -o $@

tth.o: tth.c byte_order.h tth.h tiger.h
	$(CC) -c $(CFLAGS) $< -o $@

$(LIBRARY): $(OBJECTS)
	ar  rcs $(LIBRARY) $(OBJECTS)

$(TEST_TARGET): test_sums.o $(LIBRARY)
	$(CC) test_sums.o -o $(TEST_TARGET) $(LDFLAGS)
#	$(CC) -o $(TEST_TARGET) $(LDFLAGS) $(OBJECTS) test_sums.o


test: $(TEST_TARGET)
	./$(TEST_TARGET)

dist-clean: clean

clean:
	rm -f *.o $(LIBRARY) $(TEST_TARGET)
